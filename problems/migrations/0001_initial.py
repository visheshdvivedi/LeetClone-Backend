# Generated by Django 4.2.3 on 2024-08-15 12:21

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import problems.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('name', models.CharField(max_length=20)),
                ('judge_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('likes', models.IntegerField(default=0)),
                ('dislikes', models.IntegerField(default=0)),
                ('difficulty', models.IntegerField(choices=[(0, 'School'), (1, 'Easy'), (2, 'Medium'), (3, 'Hard')])),
                ('description', models.TextField()),
                ('constraints', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('is_sample', models.BooleanField()),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='testcases', to='problems.problem', to_field='public_id')),
            ],
        ),
        migrations.CreateModel(
            name='ValueField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('name', models.CharField(max_length=20)),
                ('type', models.IntegerField(choices=[(1, 'Integer'), (2, 'String'), (3, 'Integer Array'), (4, 'String Array'), (5, '2D Integer Array'), (6, '2D String Array')])),
                ('value', models.TextField(null=True)),
                ('testcase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inputs', to='problems.testcase', to_field='public_id')),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('status', models.IntegerField(choices=[(1, 'Accepted'), (2, 'Rejected'), (3, 'Runtime Error')])),
                ('code', models.TextField()),
                ('time', models.CharField(max_length=100)),
                ('memory', models.IntegerField()),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('time_percent', models.FloatField()),
                ('memory_percent', models.FloatField()),
                ('error_string', models.TextField(null=True)),
                ('account', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL, to_field='public_id')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='problems.language', to_field='public_id')),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='problems.problem', to_field='public_id')),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('intution', models.TextField(null=True)),
                ('algorithm', models.TextField(null=True)),
                ('problem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='solutions', to='problems.problem', to_field='public_id')),
            ],
        ),
        migrations.CreateModel(
            name='ProblemTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.problem', to_field='public_id')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.tag', to_field='public_id')),
            ],
        ),
        migrations.AddField(
            model_name='problem',
            name='tags',
            field=models.ManyToManyField(through='problems.ProblemTag', to='problems.tag'),
        ),
        migrations.CreateModel(
            name='Implementation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('value', models.TextField(null=True)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='implementations', to='problems.language', to_field='public_id')),
                ('solution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='implementations', to='problems.solution', to_field='public_id')),
            ],
        ),
        migrations.CreateModel(
            name='Complexity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('value', models.CharField(max_length=20)),
                ('explanation', models.TextField()),
                ('type', models.IntegerField(choices=[(1, 'Time'), (2, 'Space')])),
                ('solution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complexities', to='problems.solution', to_field='public_id')),
            ],
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_id', models.UUIDField(default=problems.models.generate_default_uuid, unique=True)),
                ('value', models.TextField(null=True)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='codes', to='problems.language', to_field='public_id')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='defaultCode', to='problems.problem', to_field='public_id')),
            ],
        ),
    ]
